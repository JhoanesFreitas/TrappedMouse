package br.com.jho.al.maze;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

import br.com.jho.al.constants.Constants;
import br.com.jho.al.stackmanager.MyStack;

public class Maze {

	private Cell currentCell;
	private Cell exitCell;
	private Cell entryCell;
	private final char EXITMARKER = 'e';
	private final char ENTRYMARKER = 'm';
	private final char VISITED = '.';
	private final char PASSAGE = '0';
	private final char WALL = '1';
	private char [][] maze;
	private MyStack<String> mazeStack;
	private MyStack<Cell> backTracking;
	
	private int sizeRow = 0;
	private int sizeCol = 0;
	private String mazeRow = "p";
	ArrayList<String> array = new ArrayList<>();
	
	
	public void execute(){ buildStack(); }
	
	private void buildStack(){
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		System.out.println(Constants.INFOINPUT);

		try {

			while (mazeRow.length() != 0) {

				mazeRow = br.readLine();

				if (mazeRow.length() != 0)
					array.add(mazeRow);
			}

		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private void fillMaze(String[][] a, ArrayList<String> array, int sizeRow, int sizeCol) {

		String rec = "";

		for (int i = 0; i < sizeRow; i++) {
			rec = array.get(i);
			rec += "11";
			a[i] = rec.split("");
		}

	}

	public void exitMaze() {

	}
	
	public void initArrayMaze(int sizeRow, int sizeCol){
		maze = new char[sizeRow][sizeCol];
	}
	
	public void setElementsArray(int l, int c, char value){
		maze[l][c] = value;
	}
	
	public void initMaze(int size){
		mazeStack = new MyStack<>(size);
	}
	
	public void setBackTracking(MyStack<Cell> backTracking) {
		this.backTracking = backTracking;
	}
	
	public void setCurrentCell(Cell currentCell) {
		this.currentCell = currentCell;
	}
	
	public void setEntryCell(Cell entryCell) {
		this.entryCell = entryCell;
	}
	
	public void setExitCell(Cell exitCell) {
		this.exitCell = exitCell;
	}
	 
	public void setMaze(char[][] maze) {
		this.maze = maze;
	}
	
	public void setMazeStack(MyStack<String> mazeStack) {
		this.mazeStack = mazeStack;
	}
	
	public MyStack<Cell> getBackTracking() {
		return backTracking;
	}
	
	public Cell getCurrentCell() {
		return currentCell;
	}
	
	public Cell getEntryCell() {
		return entryCell;
	}
	
	public char getENTRYMARKER() {
		return ENTRYMARKER;
	}
	
	public Cell getExitCell() {
		return exitCell;
	}
	
	public char getEXITMARKER() {
		return EXITMARKER;
	}
	
	public char[][] getMaze() {
		return maze;
	}
	
	public char getElementMaze(int l, int c){
		return maze[l][c];
	}
	
	public MyStack<String> getMazeStack() {
		return mazeStack;
	}
	
	public char getPASSAGE() {
		return PASSAGE;
	}
	
	public char getVISITED() {
		return VISITED;
	}
	
	public char getWALL() {
		return WALL;
	}

	@Override
	public String toString() {
		// TODO Auto-generated method stub
		return super.toString();
	}
}
